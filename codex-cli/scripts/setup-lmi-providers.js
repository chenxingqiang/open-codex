#!/usr/bin/env node
/**
 * Setup LMI Providers Script
 * 
 * This script helps users set up Large Models Interface providers
 * in their Codex configuration.
 */

import { readFileSync, writeFileSync, existsSync, mkdirSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';
import ProviderManager from '../src/provider-manager.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

class LMISetup {
  constructor() {
    this.providerManager = new ProviderManager();
    this.configDir = this.getConfigDir();
    this.configPath = join(this.configDir, 'config.toml');
  }

  getConfigDir() {
    const homeDir = process.env.HOME || process.env.USERPROFILE;
    const configDir = join(homeDir, '.codex');
    
    if (!existsSync(configDir)) {
      mkdirSync(configDir, { recursive: true });
    }
    
    return configDir;
  }

  async run() {
    console.log('🚀 Setting up Large Models Interface providers for Codex...\n');

    // Check if config already exists
    if (existsSync(this.configPath)) {
      const existingConfig = readFileSync(this.configPath, 'utf8');
      
      if (existingConfig.includes('[model_providers.lmi_')) {
        console.log('✅ LMI providers are already configured in your config file.');
        console.log('📁 Config location:', this.configPath);
        this.showUsageInstructions();
        return;
      }
    }

    // Generate LMI providers configuration
    const lmiConfig = this.providerManager.generateTOMLConfig();
    
    // Add to existing config or create new one
    if (existsSync(this.configPath)) {
      const existingConfig = readFileSync(this.configPath, 'utf8');
      const updatedConfig = existingConfig + '\n\n# Large Models Interface Providers\n' + lmiConfig;
      writeFileSync(this.configPath, updatedConfig);
      console.log('✅ Added LMI providers to existing config file.');
    } else {
      // Create a basic config file with LMI providers
      const basicConfig = `# Codex Configuration
# This file was automatically generated by the LMI setup script

# Model configuration
model = "gpt-4o"
model_provider = "openai"

# LMI providers are configured below
# You can change the model_provider to any of the lmi_* providers

` + lmiConfig;
      
      writeFileSync(this.configPath, basicConfig);
      console.log('✅ Created new config file with LMI providers.');
    }

    console.log('📁 Config location:', this.configPath);
    console.log('\n🎉 Setup complete! You can now use any of the 51+ LMI providers.');
    
    this.showUsageInstructions();
    this.showProviderList();
  }

  showUsageInstructions() {
    console.log('\n📖 Usage Instructions:');
    console.log('1. Set your API keys as environment variables:');
    console.log('   export OPENAI_API_KEY="your-openai-key"');
    console.log('   export ANTHROPIC_API_KEY="your-anthropic-key"');
    console.log('   export GOOGLE_API_KEY="your-google-key"');
    console.log('   # ... and so on for other providers');
    console.log('\n2. Use LMI providers with Codex:');
    console.log('   codex --model-provider lmi_openai');
    console.log('   codex --model-provider lmi_anthropic');
    console.log('   codex --model-provider lmi_google');
    console.log('   codex --model-provider lmi_baidu');
    console.log('   codex --model-provider lmi_alibaba');
    console.log('   # ... and many more!');
    console.log('\n3. Or set the default provider in your config:');
    console.log('   model_provider = "lmi_openai"');
  }

  showProviderList() {
    console.log('\n🌟 Available LMI Providers:');
    const providers = this.providerManager.getAllProviders();
    
    const categories = {
      'International': ['openai', 'anthropic', 'google', 'mistral', 'cohere', 'huggingface', 'nvidia', 'xai'],
      'Chinese': ['baidu', 'alibaba', 'tencent', 'bytedance', 'iflytek', 'zhipu', 'moonshot', 'deepseek', 'qwen', 'yi', 'glm'],
      'Local/Open Source': ['ollama', 'vllm', 'lmstudio', 'textgeneration'],
      'Other': ['replicate', 'together', 'perplexity', 'groq', 'fireworks', 'openrouter']
    };

    for (const [category, providerIds] of Object.entries(categories)) {
      console.log(`\n${category}:`);
      for (const providerId of providerIds) {
        const fullId = `lmi_${providerId}`;
        const provider = providers[fullId];
        if (provider) {
          console.log(`  • ${fullId}: ${provider.name}`);
        }
      }
    }

    console.log('\n💡 Tip: Run "node src/lmi-cli.js list" to see all providers with details.');
  }
}

// Run the setup if this file is executed directly
if (import.meta.url === `file://${process.argv[1]}`) {
  const setup = new LMISetup();
  setup.run().catch(error => {
    console.error('❌ Setup failed:', error.message);
    process.exit(1);
  });
}

export default LMISetup;
